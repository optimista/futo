#!/bin/zsh

dir=$HOME/.bin/fb

case $1 in
  rm)
    name=$2
    
    if projectid=$( projectid $name ); then
      url="https://console.firebase.google.com/u/0/project/$projectid/settings/general"
      open $url
      echo "\n // FIREBASE REMOVAL"
      echo "To delete project on firebase go to your browser and newly opened link $url and click on \"Delete project\" in the absolute bottom of the page"
      echo
      read "?(Once you are done, close the tab and hit enter to continue)"
    fi
  
    mui rm $name
      
    echo "===============================================================" 
    echo "ðŸŽ‰ Congratulations! Your project has been successfully deleted." 
    echo "===============================================================" 
    echo
    ;;
  *)
    name=$1
    ccname=${${(C)name}//-} # camel case name
    base=false
    username=$( vercel whoami ) 2> /dev/null
    
    for arg in "$@"; do
      case $arg in
        --base)
          base=true
          ;;
      esac
    done

    if mui $name --without-chromatic; then 
      projectid=$name-$( openssl rand -base64 16 | tr -d "=+/" | cut -c1-5 | tr '[:upper:]' '[:lower:]' )
      cd $name

      ### MINIMAL
      firebase projects:create --non-interactive -n $ccname $projectid 

      url=https://console.firebase.google.com/project/$projectid/settings/general/web
      open $url
      echo
      echo "Hey! To continue Firestore Cloud storage integration go to your browser to newly opened link $url and set Google Cloud Platform (GCP) resource location and public-facing name to $ccname."
      echo
      echo "(Once you are done, close the tab and hit enter to continue)"
      read

      url=https://console.cloud.google.com/datastore/welcome?project=$projectid
      open $url
      echo "Perfect. Now go to your browser to this newly opened link $url and switch Google's Firestore to Native mode. Then wait around 1 minute."
      echo 
      echo "(Once you are done, close the tab and hit enter to continue)"
      read

      $dir/exp/firestore-init $projectid

      url=https://console.firebase.google.com/project/$projectid/storage
      open $url
      echo
      echo "Last thing, enable storage by clicking on 'Get Started' on just opened link $url.'"
      echo
      echo "(Once you are done, close the tab and hit enter to continue)"
      read
      
      $dir/exp/storage-init $projectid && firebase use $projectid
      # createapp == e.g. "firebase apps:sdkconfig WEB 1:233313016915:web:e6430e12bd463eb6027aa6"
      createapp=$( firebase apps:create WEB $ccname | tail -n1 | awk '{$1=$1};1' ) # awk = trim leading and trailing whitespace

      npm install -D encoding # I HAD A WEIRD ERROR WHEN NOT INSTALLING THIS, RELATED TO NEXTJS, See: https://flaviocopes.com/fix-module-not-found-cant-resolve-encoding-in-nextjs/
      npm install firebase firebase-admin nookies --legacy-peer-deps # SERVER SIDE HERE TOO
      rm -rf base/pages storybook/core/layouts/PageLayout.stories.jsx # from mui
      cp -r $dir/src/* $dir/src/.* .
      $( echo $createapp ) | sed -n '/^  "projectId"/,/^  "messagingSenderId"/p' | sed -i '' '/^const firebase/r /dev/stdin' base/core/fb/firebase.js
      
      # firestore.rules setup (already copied)
      sed -i '' "s/projectid/$projectid/" storage.rules
      
      # SERVER SIDE SERVICE ACCOUNT 
      gcloud config set project $projectid

      iamaccount=$( gcloud iam service-accounts list | grep firebase-adminsdk | sed 's/  */ /g' | cut -d ' ' -f 2 )
      gcloud iam service-accounts keys create /tmp/keys --iam-account=$iamaccount
      googleprivatekey=$( cat /tmp/keys | sed -n '/-----BEGIN PRIVATE KEY-----/s/.*"\(-----BEGIN\)/\1/p' | sed -e 's/",$//g' )
      cat /tmp/keys | sed 's/"-----BEGIN PRIVATE KEY-----.*-----END PRIVATE KEY-----\\n"/process.env.GOOGLE_PRIVATE_KEY/g' | sed -n '/^  "type"/,/^  "client_x509_cert_url"/s/^/  /p' | sed -i '' -e '/^  credential: cert({/r /dev/stdin' -e "s/projectid/$projectid/" base/core/fb/admin.js
      rm -rf /tmp/keys

      # CYPRESS INSTALL & CONFIGURATION
      npm install cypress --legacy-peer-deps --save-dev
      sed -i '' "s/\(^\/coverage\)/\1\n\/cypress\/screenshots\n\/cypress\/videos/g" .gitignore

      ## MAIN
      npm install @futo-ui/hooks @futo-ui/utils --legacy-peer-deps
      mv public/name.png public/$name.png
      
      ### Add AuthProvider
      sed -i '' "s/import { LocaleProvider } from 'core\/utils\/i18n'/&\nimport { AuthProvider } from 'user'/" app/layout.js
      sed -i '' "s/          <ThemeProvider theme={theme}>/          <AuthProvider>\n&/" app/layout.js
      sed -i '' "s/          <\/ThemeProvider>/&\n          <\/AuthProvider>/" app/layout.js
      sed -i '' '/<ThemeProvider/,/<\/ThemeProvider/s/^/  /g' app/layout.js
      
      if ! $base; then
        firebase deploy
        chr $name
      fi

      echo 
      echo "(I/II) For base of our project we are going to configure firebase-admin, enable E-mail/Password authentication and set an e-mail template for password reset."
      echo
      
      url="https://vercel.com/$username/$name/settings/environment-variables"
      echo "(1/3) First, finish configuration for server side firebase, add an environment variable on just opened link $url with following values:"
      echo "NAME: GOOGLE_PRIVATE_KEY"
      echo "VALUE: "
      echo $googleprivatekey
      echo "ENVIRONMENT: Production, Preview, Development"
      open $url
      echo
      read "?(Once you are done, close the tab and hit enter to continue)"
      
      echo 
      url=https://console.firebase.google.com/project/$projectid/authentication
      echo "(2/3) Second, enable authentication by clicking on 'Get Started' on just opened link $url. After that enable E-mail/Password & Anonymous authentications by clicking on their respective toggle controls.'"
      open $url
      echo
      read "?(Once you are done, close the tab and hit enter to continue)"
      
      echo
      url=https://console.firebase.google.com/project/$projectid/authentication/emails
      echo "(3/3) To set an e-mail template for password reset go to another newly opened link $url, click on 'Password reset' and fill out following fields. Don't forget to change 'Your name' to your name:"
      echo "Sender name: Your name"
      echo "Subject: %APP_NAME% - Reset your password / Restablecer su contraseÃ±a"
      echo "Message:"
      find $dir/templates -type f -exec cat {} \; -exec echo \;
      echo "Action URL: https://$name.vercel.app/account/confirm"
      open $url
      
      echo 
      read "?(Once you are done, close the tab and hit enter to continue)"
      echo

      if ! $base; then
        echo 
        echo "(II/II) To finish setting up the fb-demo project we are going to populate the application with the basic data."

        pop $name 1
        echo
        echo "======================================" 
        echo "ðŸŽ‰ Congratulations! That's everything." 
        echo "======================================" 
        echo
      else
        rm -rf $dir/src/app/populate
      fi
    else
      exit 1
    fi
    ;;
esac
